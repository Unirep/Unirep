import { ethers } from 'ethers';
import { IncrementalMerkleTree, SparseMerkleTree, Identity } from '@unirep/crypto';
import { Attestation, UnirepState } from '../core';
declare const toCompleteHexString: (str: string, len?: number | undefined) => string;
declare const SMT_ZERO_LEAF: BigInt;
declare const SMT_ONE_LEAF: BigInt;
declare const genNewSMT: (treeDepth: number, defaultLeafHash: BigInt) => Promise<SparseMerkleTree>;
declare const genNewEpochTree: (deployEnv?: string) => Promise<SparseMerkleTree>;
declare const getTreeDepthsForTesting: (deployEnv?: string) => {
    userStateTreeDepth: number;
    globalStateTreeDepth: number;
    epochTreeDepth: number;
};
declare const defaultUserStateLeaf: BigInt;
declare const computeEmptyUserStateRoot: (treeDepth: number) => BigInt;
declare const genNewGST: (GSTDepth: number, USTDepth: number) => IncrementalMerkleTree;
declare const genNewUserStateTree: (deployEnv?: string) => Promise<SparseMerkleTree>;
declare const genRandomAttestation: () => Attestation;
declare const genRandomList: (length: any) => BigInt[];
declare const computeEpochKeyProofHash: (epochKeyProof: any) => string;
declare const verifyNewGSTProofByIndex: (unirepContract: ethers.Contract, proofIndex: number | ethers.BigNumber) => Promise<ethers.Event | undefined>;
declare const verifyNewGSTLeafEvents: (unirepContract: ethers.Contract, currentEpoch: number | ethers.BigNumber) => Promise<BigInt[]>;
declare const verifyProcessAttestationEvents: (unirepContract: ethers.Contract, startBlindedUserState: ethers.BigNumber, finalBlindedUserState: ethers.BigNumber, _proofIndexes: ethers.BigNumber[]) => Promise<boolean>;
declare const verifyStartTransitionProof: (startTransitionProof: any) => Promise<boolean>;
declare const verifyProcessAttestationsProof: (processAttestationProof: any) => Promise<boolean>;
declare const getReputationRecords: (id: Identity, unirepState: UnirepState) => {};
declare const genEpochKeyCircuitInput: (id: Identity, tree: IncrementalMerkleTree, leafIndex: number, ustRoot: BigInt, epoch: number, nonce: number) => any;
declare const genReputationCircuitInput: (id: Identity, epoch: number, nonce: number, GSTree: IncrementalMerkleTree, leafIdx: number, reputationRecords: any, attesterId: any, _repNullifiersAmount?: any, _minRep?: any, _proveGraffiti?: any, _graffitiPreImage?: any) => Promise<any>;
declare const genProveSignUpCircuitInput: (id: Identity, epoch: number, GSTree: IncrementalMerkleTree, leafIdx: number, reputationRecords: any, attesterId: any, _signUp?: number | undefined) => Promise<any>;
export { SMT_ONE_LEAF, SMT_ZERO_LEAF, computeEmptyUserStateRoot, defaultUserStateLeaf, genNewEpochTree, genNewUserStateTree, genNewSMT, genNewGST, getTreeDepthsForTesting, genRandomAttestation, genRandomList, toCompleteHexString, computeEpochKeyProofHash, verifyNewGSTProofByIndex, verifyNewGSTLeafEvents, verifyProcessAttestationEvents, verifyStartTransitionProof, verifyProcessAttestationsProof, getReputationRecords, genEpochKeyCircuitInput, genReputationCircuitInput, genProveSignUpCircuitInput, };
