// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AttestationSubmitted extends ethereum.Event {
  get params(): AttestationSubmitted__Params {
    return new AttestationSubmitted__Params(this);
  }
}

export class AttestationSubmitted__Params {
  _event: AttestationSubmitted;

  constructor(event: AttestationSubmitted) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get epochKey(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get attester(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get attestationEvent(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get attestation(): AttestationSubmittedAttestationStruct {
    return changetype<AttestationSubmittedAttestationStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }

  get toProofIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get fromProofIndex(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class AttestationSubmittedAttestationStruct extends ethereum.Tuple {
  get attesterId(): BigInt {
    return this[0].toBigInt();
  }

  get posRep(): BigInt {
    return this[1].toBigInt();
  }

  get negRep(): BigInt {
    return this[2].toBigInt();
  }

  get graffiti(): BigInt {
    return this[3].toBigInt();
  }

  get signUp(): BigInt {
    return this[4].toBigInt();
  }
}

export class EpochEnded extends ethereum.Event {
  get params(): EpochEnded__Params {
    return new EpochEnded__Params(this);
  }
}

export class EpochEnded__Params {
  _event: EpochEnded;

  constructor(event: EpochEnded) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class IndexedEpochKeyProof extends ethereum.Event {
  get params(): IndexedEpochKeyProof__Params {
    return new IndexedEpochKeyProof__Params(this);
  }
}

export class IndexedEpochKeyProof__Params {
  _event: IndexedEpochKeyProof;

  constructor(event: IndexedEpochKeyProof) {
    this._event = event;
  }

  get proofIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get epoch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get epochKey(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get proof(): IndexedEpochKeyProofProofStruct {
    return changetype<IndexedEpochKeyProofProofStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class IndexedEpochKeyProofProofStruct extends ethereum.Tuple {
  get globalStateTree(): BigInt {
    return this[0].toBigInt();
  }

  get epoch(): BigInt {
    return this[1].toBigInt();
  }

  get epochKey(): BigInt {
    return this[2].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class IndexedProcessedAttestationsProof extends ethereum.Event {
  get params(): IndexedProcessedAttestationsProof__Params {
    return new IndexedProcessedAttestationsProof__Params(this);
  }
}

export class IndexedProcessedAttestationsProof__Params {
  _event: IndexedProcessedAttestationsProof;

  constructor(event: IndexedProcessedAttestationsProof) {
    this._event = event;
  }

  get proofIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get inputBlindedUserState(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get outputBlindedUserState(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get outputBlindedHashChain(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class IndexedReputationProof extends ethereum.Event {
  get params(): IndexedReputationProof__Params {
    return new IndexedReputationProof__Params(this);
  }
}

export class IndexedReputationProof__Params {
  _event: IndexedReputationProof;

  constructor(event: IndexedReputationProof) {
    this._event = event;
  }

  get proofIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get epoch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get epochKey(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get proof(): IndexedReputationProofProofStruct {
    return changetype<IndexedReputationProofProofStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class IndexedReputationProofProofStruct extends ethereum.Tuple {
  get repNullifiers(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get epoch(): BigInt {
    return this[1].toBigInt();
  }

  get epochKey(): BigInt {
    return this[2].toBigInt();
  }

  get globalStateTree(): BigInt {
    return this[3].toBigInt();
  }

  get attesterId(): BigInt {
    return this[4].toBigInt();
  }

  get proveReputationAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minRep(): BigInt {
    return this[6].toBigInt();
  }

  get proveGraffiti(): BigInt {
    return this[7].toBigInt();
  }

  get graffitiPreImage(): BigInt {
    return this[8].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[9].toBigIntArray();
  }
}

export class IndexedStartedTransitionProof extends ethereum.Event {
  get params(): IndexedStartedTransitionProof__Params {
    return new IndexedStartedTransitionProof__Params(this);
  }
}

export class IndexedStartedTransitionProof__Params {
  _event: IndexedStartedTransitionProof;

  constructor(event: IndexedStartedTransitionProof) {
    this._event = event;
  }

  get proofIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blindedUserState(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get globalStateTree(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get blindedHashChain(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class IndexedUserSignedUpProof extends ethereum.Event {
  get params(): IndexedUserSignedUpProof__Params {
    return new IndexedUserSignedUpProof__Params(this);
  }
}

export class IndexedUserSignedUpProof__Params {
  _event: IndexedUserSignedUpProof;

  constructor(event: IndexedUserSignedUpProof) {
    this._event = event;
  }

  get proofIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get epoch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get epochKey(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get proof(): IndexedUserSignedUpProofProofStruct {
    return changetype<IndexedUserSignedUpProofProofStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class IndexedUserSignedUpProofProofStruct extends ethereum.Tuple {
  get epoch(): BigInt {
    return this[0].toBigInt();
  }

  get epochKey(): BigInt {
    return this[1].toBigInt();
  }

  get globalStateTree(): BigInt {
    return this[2].toBigInt();
  }

  get attesterId(): BigInt {
    return this[3].toBigInt();
  }

  get userHasSignedUp(): BigInt {
    return this[4].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class IndexedUserStateTransitionProof extends ethereum.Event {
  get params(): IndexedUserStateTransitionProof__Params {
    return new IndexedUserStateTransitionProof__Params(this);
  }
}

export class IndexedUserStateTransitionProof__Params {
  _event: IndexedUserStateTransitionProof;

  constructor(event: IndexedUserStateTransitionProof) {
    this._event = event;
  }

  get proofIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proof(): IndexedUserStateTransitionProofProofStruct {
    return changetype<IndexedUserStateTransitionProofProofStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get proofIndexRecords(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class IndexedUserStateTransitionProofProofStruct extends ethereum.Tuple {
  get newGlobalStateTreeLeaf(): BigInt {
    return this[0].toBigInt();
  }

  get epkNullifiers(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get transitionFromEpoch(): BigInt {
    return this[2].toBigInt();
  }

  get blindedUserStates(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get fromGlobalStateTree(): BigInt {
    return this[4].toBigInt();
  }

  get blindedHashChains(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get fromEpochTree(): BigInt {
    return this[6].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[7].toBigIntArray();
  }
}

export class Sequencer extends ethereum.Event {
  get params(): Sequencer__Params {
    return new Sequencer__Params(this);
  }
}

export class Sequencer__Params {
  _event: Sequencer;

  constructor(event: Sequencer) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get userEvent(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class UserSignedUp extends ethereum.Event {
  get params(): UserSignedUp__Params {
    return new UserSignedUp__Params(this);
  }
}

export class UserSignedUp__Params {
  _event: UserSignedUp;

  constructor(event: UserSignedUp) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get identityCommitment(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get attesterId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get airdropAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UserStateTransitioned extends ethereum.Event {
  get params(): UserStateTransitioned__Params {
    return new UserStateTransitioned__Params(this);
  }
}

export class UserStateTransitioned__Params {
  _event: UserStateTransitioned;

  constructor(event: UserStateTransitioned) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get hashedLeaf(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get proofIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unirep__hashEpochKeyProofInputInputStruct extends ethereum.Tuple {
  get globalStateTree(): BigInt {
    return this[0].toBigInt();
  }

  get epoch(): BigInt {
    return this[1].toBigInt();
  }

  get epochKey(): BigInt {
    return this[2].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class Unirep__hashReputationProofInputInputStruct extends ethereum.Tuple {
  get repNullifiers(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get epoch(): BigInt {
    return this[1].toBigInt();
  }

  get epochKey(): BigInt {
    return this[2].toBigInt();
  }

  get globalStateTree(): BigInt {
    return this[3].toBigInt();
  }

  get attesterId(): BigInt {
    return this[4].toBigInt();
  }

  get proveReputationAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minRep(): BigInt {
    return this[6].toBigInt();
  }

  get proveGraffiti(): BigInt {
    return this[7].toBigInt();
  }

  get graffitiPreImage(): BigInt {
    return this[8].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[9].toBigIntArray();
  }
}

export class Unirep__hashSignUpProofInputInputStruct extends ethereum.Tuple {
  get epoch(): BigInt {
    return this[0].toBigInt();
  }

  get epochKey(): BigInt {
    return this[1].toBigInt();
  }

  get globalStateTree(): BigInt {
    return this[2].toBigInt();
  }

  get attesterId(): BigInt {
    return this[3].toBigInt();
  }

  get userHasSignedUp(): BigInt {
    return this[4].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class Unirep__hashUserStateTransitionProofInputInputStruct extends ethereum.Tuple {
  get newGlobalStateTreeLeaf(): BigInt {
    return this[0].toBigInt();
  }

  get epkNullifiers(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get transitionFromEpoch(): BigInt {
    return this[2].toBigInt();
  }

  get blindedUserStates(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get fromGlobalStateTree(): BigInt {
    return this[4].toBigInt();
  }

  get blindedHashChains(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get fromEpochTree(): BigInt {
    return this[6].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[7].toBigIntArray();
  }
}

export class Unirep__treeDepthsResult {
  value0: i32;
  value1: i32;
  value2: i32;

  constructor(value0: i32, value1: i32, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    return map;
  }
}

export class Unirep__verifyEpochKeyValidityInputInputStruct extends ethereum.Tuple {
  get globalStateTree(): BigInt {
    return this[0].toBigInt();
  }

  get epoch(): BigInt {
    return this[1].toBigInt();
  }

  get epochKey(): BigInt {
    return this[2].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class Unirep__verifyReputationInputInputStruct extends ethereum.Tuple {
  get repNullifiers(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get epoch(): BigInt {
    return this[1].toBigInt();
  }

  get epochKey(): BigInt {
    return this[2].toBigInt();
  }

  get globalStateTree(): BigInt {
    return this[3].toBigInt();
  }

  get attesterId(): BigInt {
    return this[4].toBigInt();
  }

  get proveReputationAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minRep(): BigInt {
    return this[6].toBigInt();
  }

  get proveGraffiti(): BigInt {
    return this[7].toBigInt();
  }

  get graffitiPreImage(): BigInt {
    return this[8].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[9].toBigIntArray();
  }
}

export class Unirep__verifyUserSignUpInputInputStruct extends ethereum.Tuple {
  get epoch(): BigInt {
    return this[0].toBigInt();
  }

  get epochKey(): BigInt {
    return this[1].toBigInt();
  }

  get globalStateTree(): BigInt {
    return this[2].toBigInt();
  }

  get attesterId(): BigInt {
    return this[3].toBigInt();
  }

  get userHasSignedUp(): BigInt {
    return this[4].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class Unirep__verifyUserStateTransitionInputInputStruct extends ethereum.Tuple {
  get newGlobalStateTreeLeaf(): BigInt {
    return this[0].toBigInt();
  }

  get epkNullifiers(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get transitionFromEpoch(): BigInt {
    return this[2].toBigInt();
  }

  get blindedUserStates(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get fromGlobalStateTree(): BigInt {
    return this[4].toBigInt();
  }

  get blindedHashChains(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get fromEpochTree(): BigInt {
    return this[6].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[7].toBigIntArray();
  }
}

export class Unirep extends ethereum.SmartContract {
  static bind(address: Address): Unirep {
    return new Unirep("Unirep", address);
  }

  airdropAmount(param0: Address): BigInt {
    let result = super.call(
      "airdropAmount",
      "airdropAmount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_airdropAmount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "airdropAmount",
      "airdropAmount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  attesters(param0: Address): BigInt {
    let result = super.call("attesters", "attesters(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_attesters(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("attesters", "attesters(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  attestingFee(): BigInt {
    let result = super.call("attestingFee", "attestingFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_attestingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("attestingFee", "attestingFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectedAttestingFee(): BigInt {
    let result = super.call(
      "collectedAttestingFee",
      "collectedAttestingFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collectedAttestingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectedAttestingFee",
      "collectedAttestingFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentEpoch(): BigInt {
    let result = super.call("currentEpoch", "currentEpoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentEpoch", "currentEpoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochLength(): BigInt {
    let result = super.call("epochLength", "epochLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epochLength", "epochLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochTransitionCompensation(param0: Address): BigInt {
    let result = super.call(
      "epochTransitionCompensation",
      "epochTransitionCompensation(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_epochTransitionCompensation(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochTransitionCompensation",
      "epochTransitionCompensation(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProofIndex(param0: Bytes): BigInt {
    let result = super.call(
      "getProofIndex",
      "getProofIndex(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_getProofIndex(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProofIndex",
      "getProofIndex(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasUserSignedUp(param0: BigInt): boolean {
    let result = super.call(
      "hasUserSignedUp",
      "hasUserSignedUp(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_hasUserSignedUp(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasUserSignedUp",
      "hasUserSignedUp(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hashEpochKeyProof(input: Unirep__hashEpochKeyProofInputInputStruct): Bytes {
    let result = super.call(
      "hashEpochKeyProof",
      "hashEpochKeyProof((uint256,uint256,uint256,uint256[8])):(bytes32)",
      [ethereum.Value.fromTuple(input)]
    );

    return result[0].toBytes();
  }

  try_hashEpochKeyProof(
    input: Unirep__hashEpochKeyProofInputInputStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashEpochKeyProof",
      "hashEpochKeyProof((uint256,uint256,uint256,uint256[8])):(bytes32)",
      [ethereum.Value.fromTuple(input)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashProcessAttestationsProof(
    outputBlindedUserState: BigInt,
    outputBlindedHashChain: BigInt,
    inputBlindedUserState: BigInt,
    proof: Array<BigInt>
  ): Bytes {
    let result = super.call(
      "hashProcessAttestationsProof",
      "hashProcessAttestationsProof(uint256,uint256,uint256,uint256[8]):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(outputBlindedUserState),
        ethereum.Value.fromUnsignedBigInt(outputBlindedHashChain),
        ethereum.Value.fromUnsignedBigInt(inputBlindedUserState),
        ethereum.Value.fromUnsignedBigIntArray(proof)
      ]
    );

    return result[0].toBytes();
  }

  try_hashProcessAttestationsProof(
    outputBlindedUserState: BigInt,
    outputBlindedHashChain: BigInt,
    inputBlindedUserState: BigInt,
    proof: Array<BigInt>
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashProcessAttestationsProof",
      "hashProcessAttestationsProof(uint256,uint256,uint256,uint256[8]):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(outputBlindedUserState),
        ethereum.Value.fromUnsignedBigInt(outputBlindedHashChain),
        ethereum.Value.fromUnsignedBigInt(inputBlindedUserState),
        ethereum.Value.fromUnsignedBigIntArray(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashReputationProof(
    input: Unirep__hashReputationProofInputInputStruct
  ): Bytes {
    let result = super.call(
      "hashReputationProof",
      "hashReputationProof((uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[8])):(bytes32)",
      [ethereum.Value.fromTuple(input)]
    );

    return result[0].toBytes();
  }

  try_hashReputationProof(
    input: Unirep__hashReputationProofInputInputStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashReputationProof",
      "hashReputationProof((uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[8])):(bytes32)",
      [ethereum.Value.fromTuple(input)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashSignUpProof(input: Unirep__hashSignUpProofInputInputStruct): Bytes {
    let result = super.call(
      "hashSignUpProof",
      "hashSignUpProof((uint256,uint256,uint256,uint256,uint256,uint256[8])):(bytes32)",
      [ethereum.Value.fromTuple(input)]
    );

    return result[0].toBytes();
  }

  try_hashSignUpProof(
    input: Unirep__hashSignUpProofInputInputStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashSignUpProof",
      "hashSignUpProof((uint256,uint256,uint256,uint256,uint256,uint256[8])):(bytes32)",
      [ethereum.Value.fromTuple(input)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashStartTransitionProof(
    blindedUserState: BigInt,
    blindedHashChain: BigInt,
    globalStateTree: BigInt,
    proof: Array<BigInt>
  ): Bytes {
    let result = super.call(
      "hashStartTransitionProof",
      "hashStartTransitionProof(uint256,uint256,uint256,uint256[8]):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(blindedUserState),
        ethereum.Value.fromUnsignedBigInt(blindedHashChain),
        ethereum.Value.fromUnsignedBigInt(globalStateTree),
        ethereum.Value.fromUnsignedBigIntArray(proof)
      ]
    );

    return result[0].toBytes();
  }

  try_hashStartTransitionProof(
    blindedUserState: BigInt,
    blindedHashChain: BigInt,
    globalStateTree: BigInt,
    proof: Array<BigInt>
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashStartTransitionProof",
      "hashStartTransitionProof(uint256,uint256,uint256,uint256[8]):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(blindedUserState),
        ethereum.Value.fromUnsignedBigInt(blindedHashChain),
        ethereum.Value.fromUnsignedBigInt(globalStateTree),
        ethereum.Value.fromUnsignedBigIntArray(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashUserStateTransitionProof(
    input: Unirep__hashUserStateTransitionProofInputInputStruct
  ): Bytes {
    let result = super.call(
      "hashUserStateTransitionProof",
      "hashUserStateTransitionProof((uint256,uint256[],uint256,uint256[],uint256,uint256[],uint256,uint256[8])):(bytes32)",
      [ethereum.Value.fromTuple(input)]
    );

    return result[0].toBytes();
  }

  try_hashUserStateTransitionProof(
    input: Unirep__hashUserStateTransitionProofInputInputStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashUserStateTransitionProof",
      "hashUserStateTransitionProof((uint256,uint256[],uint256,uint256[],uint256,uint256[],uint256,uint256[8])):(bytes32)",
      [ethereum.Value.fromTuple(input)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  latestEpochTransitionTime(): BigInt {
    let result = super.call(
      "latestEpochTransitionTime",
      "latestEpochTransitionTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_latestEpochTransitionTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestEpochTransitionTime",
      "latestEpochTransitionTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxAttesters(): BigInt {
    let result = super.call("maxAttesters", "maxAttesters():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxAttesters(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxAttesters", "maxAttesters():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxEpochKey(): BigInt {
    let result = super.call("maxEpochKey", "maxEpochKey():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxEpochKey(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxEpochKey", "maxEpochKey():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxReputationBudget(): i32 {
    let result = super.call(
      "maxReputationBudget",
      "maxReputationBudget():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_maxReputationBudget(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "maxReputationBudget",
      "maxReputationBudget():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  maxUsers(): BigInt {
    let result = super.call("maxUsers", "maxUsers():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxUsers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxUsers", "maxUsers():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextAttesterId(): BigInt {
    let result = super.call("nextAttesterId", "nextAttesterId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextAttesterId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextAttesterId",
      "nextAttesterId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numEpochKeyNoncePerEpoch(): i32 {
    let result = super.call(
      "numEpochKeyNoncePerEpoch",
      "numEpochKeyNoncePerEpoch():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_numEpochKeyNoncePerEpoch(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "numEpochKeyNoncePerEpoch",
      "numEpochKeyNoncePerEpoch():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  numUserSignUps(): BigInt {
    let result = super.call("numUserSignUps", "numUserSignUps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numUserSignUps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numUserSignUps",
      "numUserSignUps():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treeDepths(): Unirep__treeDepthsResult {
    let result = super.call(
      "treeDepths",
      "treeDepths():(uint8,uint8,uint8)",
      []
    );

    return new Unirep__treeDepthsResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32()
    );
  }

  try_treeDepths(): ethereum.CallResult<Unirep__treeDepthsResult> {
    let result = super.tryCall(
      "treeDepths",
      "treeDepths():(uint8,uint8,uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Unirep__treeDepthsResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32()
      )
    );
  }

  verifyEpochKeyValidity(
    input: Unirep__verifyEpochKeyValidityInputInputStruct
  ): boolean {
    let result = super.call(
      "verifyEpochKeyValidity",
      "verifyEpochKeyValidity((uint256,uint256,uint256,uint256[8])):(bool)",
      [ethereum.Value.fromTuple(input)]
    );

    return result[0].toBoolean();
  }

  try_verifyEpochKeyValidity(
    input: Unirep__verifyEpochKeyValidityInputInputStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyEpochKeyValidity",
      "verifyEpochKeyValidity((uint256,uint256,uint256,uint256[8])):(bool)",
      [ethereum.Value.fromTuple(input)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifyProcessAttestationProof(
    outputBlindedUserState: BigInt,
    outputBlindedHashChain: BigInt,
    inputBlindedUserState: BigInt,
    _proof: Array<BigInt>
  ): boolean {
    let result = super.call(
      "verifyProcessAttestationProof",
      "verifyProcessAttestationProof(uint256,uint256,uint256,uint256[8]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(outputBlindedUserState),
        ethereum.Value.fromUnsignedBigInt(outputBlindedHashChain),
        ethereum.Value.fromUnsignedBigInt(inputBlindedUserState),
        ethereum.Value.fromUnsignedBigIntArray(_proof)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyProcessAttestationProof(
    outputBlindedUserState: BigInt,
    outputBlindedHashChain: BigInt,
    inputBlindedUserState: BigInt,
    _proof: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyProcessAttestationProof",
      "verifyProcessAttestationProof(uint256,uint256,uint256,uint256[8]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(outputBlindedUserState),
        ethereum.Value.fromUnsignedBigInt(outputBlindedHashChain),
        ethereum.Value.fromUnsignedBigInt(inputBlindedUserState),
        ethereum.Value.fromUnsignedBigIntArray(_proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifyReputation(input: Unirep__verifyReputationInputInputStruct): boolean {
    let result = super.call(
      "verifyReputation",
      "verifyReputation((uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[8])):(bool)",
      [ethereum.Value.fromTuple(input)]
    );

    return result[0].toBoolean();
  }

  try_verifyReputation(
    input: Unirep__verifyReputationInputInputStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyReputation",
      "verifyReputation((uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[8])):(bool)",
      [ethereum.Value.fromTuple(input)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifyStartTransitionProof(
    blindedUserState: BigInt,
    blindedHashChain: BigInt,
    GSTRoot: BigInt,
    _proof: Array<BigInt>
  ): boolean {
    let result = super.call(
      "verifyStartTransitionProof",
      "verifyStartTransitionProof(uint256,uint256,uint256,uint256[8]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(blindedUserState),
        ethereum.Value.fromUnsignedBigInt(blindedHashChain),
        ethereum.Value.fromUnsignedBigInt(GSTRoot),
        ethereum.Value.fromUnsignedBigIntArray(_proof)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyStartTransitionProof(
    blindedUserState: BigInt,
    blindedHashChain: BigInt,
    GSTRoot: BigInt,
    _proof: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyStartTransitionProof",
      "verifyStartTransitionProof(uint256,uint256,uint256,uint256[8]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(blindedUserState),
        ethereum.Value.fromUnsignedBigInt(blindedHashChain),
        ethereum.Value.fromUnsignedBigInt(GSTRoot),
        ethereum.Value.fromUnsignedBigIntArray(_proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifyUserSignUp(input: Unirep__verifyUserSignUpInputInputStruct): boolean {
    let result = super.call(
      "verifyUserSignUp",
      "verifyUserSignUp((uint256,uint256,uint256,uint256,uint256,uint256[8])):(bool)",
      [ethereum.Value.fromTuple(input)]
    );

    return result[0].toBoolean();
  }

  try_verifyUserSignUp(
    input: Unirep__verifyUserSignUpInputInputStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyUserSignUp",
      "verifyUserSignUp((uint256,uint256,uint256,uint256,uint256,uint256[8])):(bool)",
      [ethereum.Value.fromTuple(input)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifyUserStateTransition(
    input: Unirep__verifyUserStateTransitionInputInputStruct
  ): boolean {
    let result = super.call(
      "verifyUserStateTransition",
      "verifyUserStateTransition((uint256,uint256[],uint256,uint256[],uint256,uint256[],uint256,uint256[8])):(bool)",
      [ethereum.Value.fromTuple(input)]
    );

    return result[0].toBoolean();
  }

  try_verifyUserStateTransition(
    input: Unirep__verifyUserStateTransitionInputInputStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyUserStateTransition",
      "verifyUserStateTransition((uint256,uint256[],uint256,uint256[],uint256,uint256[],uint256,uint256[8])):(bool)",
      [ethereum.Value.fromTuple(input)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _treeDepths(): ConstructorCall_treeDepthsStruct {
    return changetype<ConstructorCall_treeDepthsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _maxValues(): ConstructorCall_maxValuesStruct {
    return changetype<ConstructorCall_maxValuesStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get _epkValidityVerifier(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _startTransitionVerifier(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _processAttestationsVerifier(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _userStateTransitionVerifier(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _reputationVerifier(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _userSignUpVerifier(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _numEpochKeyNoncePerEpoch(): i32 {
    return this._call.inputValues[8].value.toI32();
  }

  get _maxReputationBudget(): i32 {
    return this._call.inputValues[9].value.toI32();
  }

  get _epochLength(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }

  get _attestingFee(): BigInt {
    return this._call.inputValues[11].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_treeDepthsStruct extends ethereum.Tuple {
  get globalStateTreeDepth(): i32 {
    return this[0].toI32();
  }

  get userStateTreeDepth(): i32 {
    return this[1].toI32();
  }

  get epochTreeDepth(): i32 {
    return this[2].toI32();
  }
}

export class ConstructorCall_maxValuesStruct extends ethereum.Tuple {
  get maxUsers(): BigInt {
    return this[0].toBigInt();
  }

  get maxAttesters(): BigInt {
    return this[1].toBigInt();
  }
}

export class AirdropEpochKeyCall extends ethereum.Call {
  get inputs(): AirdropEpochKeyCall__Inputs {
    return new AirdropEpochKeyCall__Inputs(this);
  }

  get outputs(): AirdropEpochKeyCall__Outputs {
    return new AirdropEpochKeyCall__Outputs(this);
  }
}

export class AirdropEpochKeyCall__Inputs {
  _call: AirdropEpochKeyCall;

  constructor(call: AirdropEpochKeyCall) {
    this._call = call;
  }

  get input(): AirdropEpochKeyCallInputStruct {
    return changetype<AirdropEpochKeyCallInputStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AirdropEpochKeyCall__Outputs {
  _call: AirdropEpochKeyCall;

  constructor(call: AirdropEpochKeyCall) {
    this._call = call;
  }
}

export class AirdropEpochKeyCallInputStruct extends ethereum.Tuple {
  get epoch(): BigInt {
    return this[0].toBigInt();
  }

  get epochKey(): BigInt {
    return this[1].toBigInt();
  }

  get globalStateTree(): BigInt {
    return this[2].toBigInt();
  }

  get attesterId(): BigInt {
    return this[3].toBigInt();
  }

  get userHasSignedUp(): BigInt {
    return this[4].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class AttesterSignUpCall extends ethereum.Call {
  get inputs(): AttesterSignUpCall__Inputs {
    return new AttesterSignUpCall__Inputs(this);
  }

  get outputs(): AttesterSignUpCall__Outputs {
    return new AttesterSignUpCall__Outputs(this);
  }
}

export class AttesterSignUpCall__Inputs {
  _call: AttesterSignUpCall;

  constructor(call: AttesterSignUpCall) {
    this._call = call;
  }
}

export class AttesterSignUpCall__Outputs {
  _call: AttesterSignUpCall;

  constructor(call: AttesterSignUpCall) {
    this._call = call;
  }
}

export class AttesterSignUpViaRelayerCall extends ethereum.Call {
  get inputs(): AttesterSignUpViaRelayerCall__Inputs {
    return new AttesterSignUpViaRelayerCall__Inputs(this);
  }

  get outputs(): AttesterSignUpViaRelayerCall__Outputs {
    return new AttesterSignUpViaRelayerCall__Outputs(this);
  }
}

export class AttesterSignUpViaRelayerCall__Inputs {
  _call: AttesterSignUpViaRelayerCall;

  constructor(call: AttesterSignUpViaRelayerCall) {
    this._call = call;
  }

  get attester(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AttesterSignUpViaRelayerCall__Outputs {
  _call: AttesterSignUpViaRelayerCall;

  constructor(call: AttesterSignUpViaRelayerCall) {
    this._call = call;
  }
}

export class BeginEpochTransitionCall extends ethereum.Call {
  get inputs(): BeginEpochTransitionCall__Inputs {
    return new BeginEpochTransitionCall__Inputs(this);
  }

  get outputs(): BeginEpochTransitionCall__Outputs {
    return new BeginEpochTransitionCall__Outputs(this);
  }
}

export class BeginEpochTransitionCall__Inputs {
  _call: BeginEpochTransitionCall;

  constructor(call: BeginEpochTransitionCall) {
    this._call = call;
  }
}

export class BeginEpochTransitionCall__Outputs {
  _call: BeginEpochTransitionCall;

  constructor(call: BeginEpochTransitionCall) {
    this._call = call;
  }
}

export class BurnAttestingFeeCall extends ethereum.Call {
  get inputs(): BurnAttestingFeeCall__Inputs {
    return new BurnAttestingFeeCall__Inputs(this);
  }

  get outputs(): BurnAttestingFeeCall__Outputs {
    return new BurnAttestingFeeCall__Outputs(this);
  }
}

export class BurnAttestingFeeCall__Inputs {
  _call: BurnAttestingFeeCall;

  constructor(call: BurnAttestingFeeCall) {
    this._call = call;
  }
}

export class BurnAttestingFeeCall__Outputs {
  _call: BurnAttestingFeeCall;

  constructor(call: BurnAttestingFeeCall) {
    this._call = call;
  }
}

export class CollectEpochTransitionCompensationCall extends ethereum.Call {
  get inputs(): CollectEpochTransitionCompensationCall__Inputs {
    return new CollectEpochTransitionCompensationCall__Inputs(this);
  }

  get outputs(): CollectEpochTransitionCompensationCall__Outputs {
    return new CollectEpochTransitionCompensationCall__Outputs(this);
  }
}

export class CollectEpochTransitionCompensationCall__Inputs {
  _call: CollectEpochTransitionCompensationCall;

  constructor(call: CollectEpochTransitionCompensationCall) {
    this._call = call;
  }
}

export class CollectEpochTransitionCompensationCall__Outputs {
  _call: CollectEpochTransitionCompensationCall;

  constructor(call: CollectEpochTransitionCompensationCall) {
    this._call = call;
  }
}

export class ProcessAttestationsCall extends ethereum.Call {
  get inputs(): ProcessAttestationsCall__Inputs {
    return new ProcessAttestationsCall__Inputs(this);
  }

  get outputs(): ProcessAttestationsCall__Outputs {
    return new ProcessAttestationsCall__Outputs(this);
  }
}

export class ProcessAttestationsCall__Inputs {
  _call: ProcessAttestationsCall;

  constructor(call: ProcessAttestationsCall) {
    this._call = call;
  }

  get outputBlindedUserState(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get outputBlindedHashChain(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get inputBlindedUserState(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class ProcessAttestationsCall__Outputs {
  _call: ProcessAttestationsCall;

  constructor(call: ProcessAttestationsCall) {
    this._call = call;
  }
}

export class SetAirdropAmountCall extends ethereum.Call {
  get inputs(): SetAirdropAmountCall__Inputs {
    return new SetAirdropAmountCall__Inputs(this);
  }

  get outputs(): SetAirdropAmountCall__Outputs {
    return new SetAirdropAmountCall__Outputs(this);
  }
}

export class SetAirdropAmountCall__Inputs {
  _call: SetAirdropAmountCall;

  constructor(call: SetAirdropAmountCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAirdropAmountCall__Outputs {
  _call: SetAirdropAmountCall;

  constructor(call: SetAirdropAmountCall) {
    this._call = call;
  }
}

export class SpendReputationCall extends ethereum.Call {
  get inputs(): SpendReputationCall__Inputs {
    return new SpendReputationCall__Inputs(this);
  }

  get outputs(): SpendReputationCall__Outputs {
    return new SpendReputationCall__Outputs(this);
  }
}

export class SpendReputationCall__Inputs {
  _call: SpendReputationCall;

  constructor(call: SpendReputationCall) {
    this._call = call;
  }

  get input(): SpendReputationCallInputStruct {
    return changetype<SpendReputationCallInputStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SpendReputationCall__Outputs {
  _call: SpendReputationCall;

  constructor(call: SpendReputationCall) {
    this._call = call;
  }
}

export class SpendReputationCallInputStruct extends ethereum.Tuple {
  get repNullifiers(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get epoch(): BigInt {
    return this[1].toBigInt();
  }

  get epochKey(): BigInt {
    return this[2].toBigInt();
  }

  get globalStateTree(): BigInt {
    return this[3].toBigInt();
  }

  get attesterId(): BigInt {
    return this[4].toBigInt();
  }

  get proveReputationAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minRep(): BigInt {
    return this[6].toBigInt();
  }

  get proveGraffiti(): BigInt {
    return this[7].toBigInt();
  }

  get graffitiPreImage(): BigInt {
    return this[8].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[9].toBigIntArray();
  }
}

export class StartUserStateTransitionCall extends ethereum.Call {
  get inputs(): StartUserStateTransitionCall__Inputs {
    return new StartUserStateTransitionCall__Inputs(this);
  }

  get outputs(): StartUserStateTransitionCall__Outputs {
    return new StartUserStateTransitionCall__Outputs(this);
  }
}

export class StartUserStateTransitionCall__Inputs {
  _call: StartUserStateTransitionCall;

  constructor(call: StartUserStateTransitionCall) {
    this._call = call;
  }

  get blindedUserState(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get blindedHashChain(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get globalStateTree(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class StartUserStateTransitionCall__Outputs {
  _call: StartUserStateTransitionCall;

  constructor(call: StartUserStateTransitionCall) {
    this._call = call;
  }
}

export class SubmitAttestationCall extends ethereum.Call {
  get inputs(): SubmitAttestationCall__Inputs {
    return new SubmitAttestationCall__Inputs(this);
  }

  get outputs(): SubmitAttestationCall__Outputs {
    return new SubmitAttestationCall__Outputs(this);
  }
}

export class SubmitAttestationCall__Inputs {
  _call: SubmitAttestationCall;

  constructor(call: SubmitAttestationCall) {
    this._call = call;
  }

  get attestation(): SubmitAttestationCallAttestationStruct {
    return changetype<SubmitAttestationCallAttestationStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get epochKey(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get toProofIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get fromProofIndex(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SubmitAttestationCall__Outputs {
  _call: SubmitAttestationCall;

  constructor(call: SubmitAttestationCall) {
    this._call = call;
  }
}

export class SubmitAttestationCallAttestationStruct extends ethereum.Tuple {
  get attesterId(): BigInt {
    return this[0].toBigInt();
  }

  get posRep(): BigInt {
    return this[1].toBigInt();
  }

  get negRep(): BigInt {
    return this[2].toBigInt();
  }

  get graffiti(): BigInt {
    return this[3].toBigInt();
  }

  get signUp(): BigInt {
    return this[4].toBigInt();
  }
}

export class SubmitAttestationViaRelayerCall extends ethereum.Call {
  get inputs(): SubmitAttestationViaRelayerCall__Inputs {
    return new SubmitAttestationViaRelayerCall__Inputs(this);
  }

  get outputs(): SubmitAttestationViaRelayerCall__Outputs {
    return new SubmitAttestationViaRelayerCall__Outputs(this);
  }
}

export class SubmitAttestationViaRelayerCall__Inputs {
  _call: SubmitAttestationViaRelayerCall;

  constructor(call: SubmitAttestationViaRelayerCall) {
    this._call = call;
  }

  get attester(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get attestation(): SubmitAttestationViaRelayerCallAttestationStruct {
    return changetype<SubmitAttestationViaRelayerCallAttestationStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get epochKey(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get toProofIndex(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get fromProofIndex(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SubmitAttestationViaRelayerCall__Outputs {
  _call: SubmitAttestationViaRelayerCall;

  constructor(call: SubmitAttestationViaRelayerCall) {
    this._call = call;
  }
}

export class SubmitAttestationViaRelayerCallAttestationStruct extends ethereum.Tuple {
  get attesterId(): BigInt {
    return this[0].toBigInt();
  }

  get posRep(): BigInt {
    return this[1].toBigInt();
  }

  get negRep(): BigInt {
    return this[2].toBigInt();
  }

  get graffiti(): BigInt {
    return this[3].toBigInt();
  }

  get signUp(): BigInt {
    return this[4].toBigInt();
  }
}

export class SubmitEpochKeyProofCall extends ethereum.Call {
  get inputs(): SubmitEpochKeyProofCall__Inputs {
    return new SubmitEpochKeyProofCall__Inputs(this);
  }

  get outputs(): SubmitEpochKeyProofCall__Outputs {
    return new SubmitEpochKeyProofCall__Outputs(this);
  }
}

export class SubmitEpochKeyProofCall__Inputs {
  _call: SubmitEpochKeyProofCall;

  constructor(call: SubmitEpochKeyProofCall) {
    this._call = call;
  }

  get input(): SubmitEpochKeyProofCallInputStruct {
    return changetype<SubmitEpochKeyProofCallInputStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SubmitEpochKeyProofCall__Outputs {
  _call: SubmitEpochKeyProofCall;

  constructor(call: SubmitEpochKeyProofCall) {
    this._call = call;
  }
}

export class SubmitEpochKeyProofCallInputStruct extends ethereum.Tuple {
  get globalStateTree(): BigInt {
    return this[0].toBigInt();
  }

  get epoch(): BigInt {
    return this[1].toBigInt();
  }

  get epochKey(): BigInt {
    return this[2].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class UpdateUserStateRootCall extends ethereum.Call {
  get inputs(): UpdateUserStateRootCall__Inputs {
    return new UpdateUserStateRootCall__Inputs(this);
  }

  get outputs(): UpdateUserStateRootCall__Outputs {
    return new UpdateUserStateRootCall__Outputs(this);
  }
}

export class UpdateUserStateRootCall__Inputs {
  _call: UpdateUserStateRootCall;

  constructor(call: UpdateUserStateRootCall) {
    this._call = call;
  }

  get proof(): UpdateUserStateRootCallProofStruct {
    return changetype<UpdateUserStateRootCallProofStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get proofIndexRecords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UpdateUserStateRootCall__Outputs {
  _call: UpdateUserStateRootCall;

  constructor(call: UpdateUserStateRootCall) {
    this._call = call;
  }
}

export class UpdateUserStateRootCallProofStruct extends ethereum.Tuple {
  get newGlobalStateTreeLeaf(): BigInt {
    return this[0].toBigInt();
  }

  get epkNullifiers(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get transitionFromEpoch(): BigInt {
    return this[2].toBigInt();
  }

  get blindedUserStates(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get fromGlobalStateTree(): BigInt {
    return this[4].toBigInt();
  }

  get blindedHashChains(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get fromEpochTree(): BigInt {
    return this[6].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[7].toBigIntArray();
  }
}

export class UserSignUpCall extends ethereum.Call {
  get inputs(): UserSignUpCall__Inputs {
    return new UserSignUpCall__Inputs(this);
  }

  get outputs(): UserSignUpCall__Outputs {
    return new UserSignUpCall__Outputs(this);
  }
}

export class UserSignUpCall__Inputs {
  _call: UserSignUpCall;

  constructor(call: UserSignUpCall) {
    this._call = call;
  }

  get identityCommitment(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UserSignUpCall__Outputs {
  _call: UserSignUpCall;

  constructor(call: UserSignUpCall) {
    this._call = call;
  }
}
