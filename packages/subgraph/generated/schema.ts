// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class UserEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("identityCommitment", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("attesterId", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("epochKey", Value.fromBigInt(BigInt.zero()));
    this.set("airdropRep", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserEntity", id.toString(), this);
    }
  }

  static load(id: string): UserEntity | null {
    return changetype<UserEntity | null>(store.get("UserEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get identityCommitment(): BigDecimal {
    let value = this.get("identityCommitment");
    return value!.toBigDecimal();
  }

  set identityCommitment(value: BigDecimal) {
    this.set("identityCommitment", Value.fromBigDecimal(value));
  }

  get attesterId(): BigDecimal {
    let value = this.get("attesterId");
    return value!.toBigDecimal();
  }

  set attesterId(value: BigDecimal) {
    this.set("attesterId", Value.fromBigDecimal(value));
  }

  get epochKey(): BigInt {
    let value = this.get("epochKey");
    return value!.toBigInt();
  }

  set epochKey(value: BigInt) {
    this.set("epochKey", Value.fromBigInt(value));
  }

  get airdropRep(): BigInt {
    let value = this.get("airdropRep");
    return value!.toBigInt();
  }

  set airdropRep(value: BigInt) {
    this.set("airdropRep", Value.fromBigInt(value));
  }
}

export class ReputationEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("posRep", Value.fromBigInt(BigInt.zero()));
    this.set("negRep", Value.fromBigInt(BigInt.zero()));
    this.set("graffiti", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReputationEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReputationEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReputationEntity", id.toString(), this);
    }
  }

  static load(id: string): ReputationEntity | null {
    return changetype<ReputationEntity | null>(
      store.get("ReputationEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get posRep(): BigInt {
    let value = this.get("posRep");
    return value!.toBigInt();
  }

  set posRep(value: BigInt) {
    this.set("posRep", Value.fromBigInt(value));
  }

  get negRep(): BigInt {
    let value = this.get("negRep");
    return value!.toBigInt();
  }

  set negRep(value: BigInt) {
    this.set("negRep", Value.fromBigInt(value));
  }

  get graffiti(): BigInt {
    let value = this.get("graffiti");
    return value!.toBigInt();
  }

  set graffiti(value: BigInt) {
    this.set("graffiti", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}
